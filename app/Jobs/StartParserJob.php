<?php

namespace App\Jobs;

use App\Services\AvitoParser as AvitoParserService;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Support\Facades\DB;

class StartParserJob implements ShouldQueue
{
    use Queueable;

    protected string $query;

    /**
     * Create a new job instance.
     */
    public function __construct(string $query)
    {
        $this->query = $query;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        /**
         * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.
         */
        DB::table('products')->delete();

        push_event("üéØ –ù–∞—á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞ Avito –ø–æ –∑–∞–ø—Ä–æ—Å—É: {$this->query}.");

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏.
         */
        $proxies = app(\App\Base\Proxy\Actions\Get::class)->getAll();
        $proxies_count = $proxies->count();
        push_event("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {$proxies_count}.");

        push_event("üîç –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.");

        $parser = new AvitoParserService();
        $total = null;

        foreach ($proxies as $index => $proxy) {
            push_event("üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ #".($index + 1).": {$proxy->ip}:{$proxy->port}");

            try {
                $total = $parser->getTotalPages($this->query, [
                    'ip' => $proxy->ip,
                    'port' => $proxy->port,
                    'login' => $proxy->login,
                    'password' => $proxy->password,
                ]);

                push_event("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ {$proxy->ip}:{$proxy->port}.");
                push_event("üì∞ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {$total['total']}");
                break; // —É—Å–ø–µ—à–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            } catch (\Throwable $e) {
                push_event("‚ùå –û—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ {$proxy->ip}: {$e->getMessage()}");
            }
        }

        if (!$total) {
            push_event("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ –ø—Ä–æ–∫—Å–∏. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            return;
        }

        /**
         * –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.
         */
        $delay_seconds = 150; // 2.5 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        $cycles = ceil($total['pages'] / $proxies_count);
        $total_seconds = $cycles * $delay_seconds;

        $hours = floor($total_seconds / 3600);
        $minutes = floor(($total_seconds % 3600) / 60);

        push_event("‚è±Ô∏è –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {$hours} —á {$minutes} –º–∏–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü: {$total['pages']}, –ø—Ä–æ–∫—Å–∏: {$proxies_count}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {$delay_seconds} —Å–µ–∫).");

        $delay = now();

        $page = 1;
        $total_pages = $total['pages'];
        //$total_pages = 2;

        while ($page <= $total_pages) {
            foreach ($proxies as $proxy) {
                if ($page > $total_pages) {
                    break; // –≤—Å—ë
                }

                dispatch((new ParseAvitoJob($this->query, $page, $proxies->toArray()))
                    ->delay($delay));

                $page++;
            }

            // –ñ–¥—ë–º 2.5 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É "–≤–æ–ª–Ω–∞–º–∏"
            $delay = $delay->addSeconds($delay_seconds);
        }

    }
}
