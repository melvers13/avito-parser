<?php

namespace App\Jobs;

use App\Models\Product;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Services\AvitoParser;

class ParseAvitoJob implements ShouldQueue
{
    use InteractsWithQueue, Queueable, SerializesModels;

    protected string $query;
    protected int $page;
    protected array $proxies;

    public function __construct(string $query, int $page, array $proxies)
    {
        $this->query = $query;
        $this->page = $page;
        $this->proxies = $proxies;
    }

    public function handle(): void
    {
        $parser = new AvitoParser();
        $url = $this->query . '&p=' . $this->page;

        foreach ($this->proxies as $index => $proxy) {
            try {
                push_event("üîÑ –°—Ç—Ä. {$this->page}: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ {$proxy['ip']}:{$proxy['port']}");

                $items = $parser->getItems($this->query, $this->page, [
                    'ip' => $proxy['ip'],
                    'port' => $proxy['port'],
                    'login' => $proxy['login'],
                    'password' => $proxy['password'],
                ]);

                push_event("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {$this->page} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ {$proxy['ip']}, –Ω–∞–π–¥–µ–Ω–æ: " . count($items));

                foreach ($items as $item) {
                    Product::create([
                        'name' => $item['title'],
                        'author' => $item['seller'],
                        'price' => $item['price'],
                        'url' => $item['link'],
                        'page' => $this->page,
                        'location' => $item['location'],
                    ]);
                }

                return; // –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
            } catch (\Throwable $e) {
                push_event("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {$proxy['ip']} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å—Ç—Ä. {$this->page}");
            }
        }

        push_event("‚õî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {$this->page} –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
    }
}
